#!/usr/bin/env ruby
$: << "./lib"
require 'ftools'
require 'optparse'
require 'ostruct'
require 'yaml'

DEFAULT_PASSWORD = 'pass@word1'
DEFAULT_SECRET = 'OtxrzxIsfpFjA7SwPzILwy8Bw21TLhquhboDYROV'

options = OpenStruct.new
opts = OptionParser.new do |opts|
    opts.banner = "Usage: parkplace [options] [directory]"

    opts.separator ""
    opts.separator "Specific options:"

    opts.on("-D", "--[no-]daemon",  "Daemon mode") do |d|
        options.daemon = d
    end

    opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
        options.verbose = v
    end

    opts.separator ""
    opts.separator "Common options:"
  
    opts.on_tail("-h", "--help", "Show this message") do
      puts opts
      exit
    end
  
    # Another typical switch to print the version.
    opts.on_tail("--version", "Show version") do
      puts ParkPlace::VERSION
      exit
    end
end

opts.parse! ARGV
options.parkplace_dir = ARGV[0]

# locate ~/.parkplace
if options.parkplace_dir.nil?
    homes = []
    homes << [ENV['HOME'], File.join( ENV['HOME'], '.parkplace' )] if ENV['HOME']
    homes << [ENV['APPDATA'], File.join( ENV['APPDATA'], 'ParkPlace' )] if ENV['APPDATA']
    homes.each do |home_top, home_dir|
        next unless home_top
        if File.exists? home_top
            options.parkplace_dir = home_dir
            break
        end
    end
end

abort "** No home directory found, please say the directory when you run #$O." unless options.parkplace_dir
File.makedirs( options.parkplace_dir )
conf = File.join( options.parkplace_dir, 'config.yaml' )
if File.exists? conf
    YAML.load_file( conf ).each { |k,v| options.__send__("#{k}=", v) if options.__send__(k).nil? }
end
options.storage_dir = File.expand_path(options.storage_dir || 'storage', options.parkplace_dir)
options.database ||= {:adapter => 'sqlite3', :database => File.join(options.parkplace_dir, 'park.db')}

module ParkPlace; end
ParkPlace::STORAGE_PATH = options.storage_dir

require 'parkplace'
require 'parkplace/control'
include ParkPlace

ParkPlace::Models::Base.establish_connection(options.database)
ParkPlace::Models::Base.logger = Logger.new('camping.log') if $DEBUG
ParkPlace.create

if ParkPlace::Models::User.count == 0
    puts "** No users found, creating the `admin' user."
    ParkPlace::Models::User.create :login => "admin", :password => DEFAULT_PASSWORD,
        :email => "admin@parkplace.net", :key => "44CF9590006BF252F707", :secret => DEFAULT_SECRET,
        :activated_at => Time.now, :superuser => 1
end

admin = ParkPlace::Models::User.find_by_login "admin"
if admin.password == hmac_sha1( DEFAULT_PASSWORD, admin.secret )
    puts "** Please login in with `admin' and password `#{DEFAULT_PASSWORD}'"
    puts "** You should change the default password or delete the admin at soonest chance!"
end

ParkPlace.serve
